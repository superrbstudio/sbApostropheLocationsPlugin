options:
  type: INNODB
  
# The location object
sbLocation:
  actAs:
    Timestampable: ~
    Taggable: ~
    Sluggable:
      unique: true
      fields: [ title ]
      canUpdate: false
  columns:
    id:
      type: integer
      primary: true
      autoincrement: true
    author_id:
      type: integer
    active:
      type: boolean
      default: false
      notnull: true
    title:
      type: string(255)
    description: 
      type: clob
    website_url:
      type: string(255)
    map_description:
      type: clob
    address_line1:
      type: string(255)
    address_line2:
      type: string(255)
    address_town_city:
      type: string(255)
    address_county:
      type: string(255)
    address_state:
      type: string(255)
    address_country:
      type: string(255)
    address_postal_code:
      type: string(50)
    geocode_latitude:
      type: float
      scale: 8
    geocode_longitude:
      type: float
      scale: 8
    telephone_landline:
      type: string(100)
    telephone_mobile:
      type: string(100)
  relations:
    Author:
      class: sfGuardUser
      foreignAlias: LocationAuthorItems
      local: author_id
      foreign: id
      onDelete: SET NULL
    aSearchDocuments:
      class: aSearchDocument
      refClass: sbLocationToASearchDocument
      foreign: a_search_document_id
      local: sb_location_id
    Categories:
      foreignAlias: sbLocations
      class: aCategory
      refClass: sbLocationToCategory
      local: location_id
      foreign: category_id
  indexes:
    active: { fields: active }
    author: { fields: author_id }
    county: { fields: address_county }
    state:  { fields: address_state }
    country: { fields: address_country }
    
sbLocationToCategory:
  columns:
    location_id:
      type: integer
      primary: true
    category_id:
      type: integer
      primary: true
  relations:
    BlogItem:
      foreignAlias: sbLocationCategories
      class: sbLocation
      local: location_id
      onDelete: CASCADE
    Category:
      foreignAlias: sbLocationCategories
      class: aCategory
      local: category_id
      onDelete: CASCADE
      
aCategory:
  relations:
    sbLocations:
      foreignAlias: sbLocationCategories
      class: sbLocation
      refClass: sbLocationToCategory
      local: category_id
      foreign: location_id

# Link to a search document
sbLocationToASearchDocument:
  columns:
    a_search_document_id:
      type: integer
    # Must be your table name followed by _id
    sb_location_id:
      type: integer
  relations:
    aSearchDocument:
      local: a_search_document_id
      foreign: id
      class: aSearchDocument
      onDelete: cascade
    sbLocation:
      local: sb_location_id
      foreign: id
      class: sbLocation
      onDelete: cascade
  options:
    symfony:
      form:   false
      filter: false
      
      
# Single Map Location Map Slot
sbSingleLocationMapSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbSingleLocationMap'
