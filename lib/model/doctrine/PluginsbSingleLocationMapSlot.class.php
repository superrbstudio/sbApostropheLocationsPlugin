<?php

/**
 * PluginsbSingleLocationMapSlot
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginsbSingleLocationMapSlot extends BasesbSingleLocationMapSlot
{
  protected $editDefault = true;
  
  public function preSave($event) 
  { 
    // set the geo co-ordinates if they haven't been set
    $values = $this->getArrayValue();
    $mapSystem = sfConfig::get('app_sbLocations_map_system', 'sbGoogleMap');

    switch($mapSystem)
    {
      case 'sbOpenStreetMap':
        $apiUrl = 'http://nominatim.openstreetmap.org/search';
        break;

      default:
        $apiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';
    }

    $lookup = new sbLookupAddress(array('address' => $this->getAddress('comma'),
                                        'api_url' => $apiUrl));

    if($lookup->lookupGeolocationFromAddress())
    {
      $values['longitude'] = $lookup->getLongitude();
      $values['latitude']  = $lookup->getLatitude();
      $this->setArrayValue($values);
    }
    
    parent::preSave($event);
  }
  
  public function getAddress($format = 'array')
  {
		$address = array();
    $values  = $this->getArrayValue();
		
		if($values['address_line1'] != ''){ $address['line1'] = $values['address_line1']; }
		if($values['address_line2'] != ''){ $address['line2'] = $values['address_line1']; }
		if($values['address_town_city'] != ''){ $address['town_city'] = $values['address_town_city']; }
		if($values['address_county'] != ''){ $address['county'] = $values['address_county']; }
		if($values['address_state'] != ''){ $address['state'] = $values['address_state']; }
		if($values['address_postal_code'] != ''){ $address['postal_code'] = $values['address_postal_code']; }
		if($values['address_country'] != ''){ $address['country'] = $values['address_country']; }
		
		switch($format)
		{
			case 'comma':
				$address = implode(', ', $address);
				break;
			
			case 'newline':
				$address = implode('\r\n', $address);
				break;
		}
		
		return $address;
  }

}